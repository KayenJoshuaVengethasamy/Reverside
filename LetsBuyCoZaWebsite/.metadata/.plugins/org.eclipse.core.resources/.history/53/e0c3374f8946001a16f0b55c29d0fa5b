package com.WebService.LetsBuy.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.WebService.LetsBuy.model.User;
import com.WebService.LetsBuy.services.TokenService;
import com.WebService.LetsBuy.services.UserService;
import com.WebService.LetsBuy.token.GenerateToken;  


@RestController  
@RequestMapping("/api")  
@CrossOrigin(origins = "http://localhost:4200", allowedHeaders = "*", exposedHeaders = "Authorization")  
public class UserController {
	 @Autowired  
	    private UserService userService;  
	      
	    @Autowired  
	    private TokenService tokenService;  
	      
	    GenerateToken generateToken = new GenerateToken();  
	      
	    @PostMapping("/saveUser")  
	    public int saveAdminDetail(@RequestBody User user) {  
	        return userService.saveUserDetail(user);  
	    }  
	      
	    @PostMapping("/login")  
	    public ResponseEntity<Integer> login(@RequestBody User user)  
	    {  
	        int status;  
	        HttpHeaders httpHeader = null;  
	      
	  status = userService.userLogin(user.getUserEmail(), user.getUserPassword());
	        if (status > 0)   
	        {  
	            String tokenData[] = generateToken.createJWT(user.getUserEmail(), "LetsBuy", "JWT Token",  
	                    user.getUserRole(), 43200000);  
	              
	            String token = tokenData[0];  
	              
	            System.out.println("Authorization :: " + token);  
	            httpHeader = new HttpHeaders();  
	  
	            httpHeader.add("Authorization", token);  
	  
	            long isUserEmailExists = tokenService.getTokenDetail(user.getUserEmail());  
	            if (isUserEmailExists > 0)   
	            {  
	                tokenService.updateToken(user.getUserEmail(), token, tokenData[1]);  
	            }   
	            else   
	            {  
	                tokenService.saveUserEmail(user.getUserEmail(), status);  
	                tokenService.updateToken(user.getUserEmail(), token, tokenData[1]);  
	            }  
	  
	            return new ResponseEntity<Integer>(status, httpHeader, HttpStatus.OK);  
	        }   
	          	        else   
	        {  
	            return new ResponseEntity<Integer>(status, httpHeader, HttpStatus.OK);  
	        }  
	          
	  
	    }  
	      
	      
	    @GetMapping("/getUserData/{userId}")  
	    public List<User> getAdminData(@PathVariable int userID, @RequestHeader("Authorization") String authorizationToken)  
	    {  
	        String token[] = authorizationToken.split(" ");  
	        int result = tokenService.tokenAuthentication(token[1], userID);  
	          
	        if (result > 0) {  
	            return userService.getUserData();  
	        } else {  
	            return null;  
	        }  
	    }  
	      
	}  